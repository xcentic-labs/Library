// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model User {
  id           Int                  @id @default(autoincrement())
  name         String               @db.VarChar(100)
  phoneNumber  String               @unique @db.VarChar(10)
  email        String               @unique
  password     String
  isLoggedIn   Boolean              @default(false)
  role         Role                 @default(User)
  createrAt    DateTime             @default(now())
  education    String?
  fatherName   String?
  motherName   String?
  AadharNumber String?
  Gender       String?
  seat         Seat[]
  session      counsellingsession[]
}

model Layout {
  id         Int          @id @default(autoincrement())
  layoutName String       @unique
  layoutCols Int
  layoutRows Int
  boxesAt    String?      @db.VarChar(500)
  seats      Seat[]
  Fee        MonthlyFee[]
}

model MonthlyFee {
  id       Int     @id @default(autoincrement())
  month    Int
  fee      Int
  layoutId Int?
  layout   Layout? @relation(fields: [layoutId], references: [id])
}

model Seat {
  id               Int      @id @default(autoincrement())
  userId           Int?
  bookedBy         User?    @relation(fields: [userId], references: [id])
  isLocker         Boolean
  isBlocked        Boolean  @default(false)
  seatNumber       Int
  index            Int?
  slot             Slot?
  isBooked         Boolean  @default(false)
  bookingStartDate DateTime @default(now())
  bookingEndDate   DateTime @default(now())
  layoutId         Int? // Foreign key to Layout
  layout           Layout?  @relation(fields: [layoutId], references: [id])
}

model counselling {
  id                 Int                  @id @default(autoincrement())
  name               String
  price              Int
  benefits           String
  counsellingsession counsellingsession[]
}

model counsellingsession {
  id            Int          @id @default(autoincrement())
  status        Boolean
  counsellingId Int
  counselling   counselling? @relation(fields: [counsellingId], references: [id])
  userId        Int?
  bookedBy      User?        @relation(fields: [userId], references: [id])
  createrAt     DateTime     @default(now())
}

model menu {
  id       Int    @id @default(autoincrement())
  title    String
  permitTo String
  priority String
  item     item[]
}

model item {
  id       Int    @id @default(autoincrement())
  name     String
  icon     String
  route    String
  parentId Int? // Foreign key to Layout
  parent   menu?  @relation(fields: [parentId], references: [id])
}

model otp {
  id        Int    @id @default(autoincrement())
  email     String
  otp       String
  sessionId String
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
}

enum Slot {
  Morning
  AfterNoon
  Night
}
